@{
    Layout = null;
}
@model  List<WebBDS.Models.Thongke>
@{
    List<WebBDS.Models.Thongke> listThongke = new List<WebBDS.Models.Thongke>();
    listThongke = Model;
    int dem = 0;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <link rel="apple-touch-icon" sizes="76x76" href="~/Content/custom/User/assets/img/apple-icon.png">
    <link rel="icon" type="image/png" href="~/images/favicon.ico">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <title>
        Dự Án
    </title>
    <meta content='width=device-width, initial-scale=1.0, shrink-to-fit=no' name='viewport' />
    <!--     Fonts and icons     -->
    <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Roboto+Slab:400,700|Material+Icons" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/latest/css/font-awesome.min.css">

    <link href="https://unpkg.com/bootstrap-table@1.18.2/dist/bootstrap-table.min.css" rel="stylesheet">
    <link href="https://unpkg.com/bootstrap-table@1.18.2/dist/extensions/fixed-columns/bootstrap-table-fixed-columns.min.css" rel="stylesheet">

    <!-- CSS Files -->
    <link href="~/Content/custom/User/assets/css/material-dashboard.css?v=2.1.2" rel="stylesheet" />
    <!-- CSS Just for demo purpose, don't include it in your project -->
    <link href="~/Content/custom/User/assets/demo/demo.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.css" />
    <link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />

    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.2/css/jquery.dataTables.min.css">

    <link rel="stylesheet" href="https://unpkg.com/bootstrap-table@1.18.3/dist/bootstrap-table.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.2/css/jquery.dataTables.min.css">

    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>

    <style>
        body, html {
            background-color: #000;
            color: #fff;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }

        canvas {
            position: absolute;
            top: 0;
            left: 0;
            z-index: 50;
        }

        .container-fluid {
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            z-index: 150;
            position: absolute;
        }

        .card {
            overflow-x: hidden;
            overflow-y: scroll;
            max-height: 580px;
        }

        #example_filter, .dataTables_length {
            margin-top: 20px !important;
        }

        .thead-dark th {
            color: #000 !important;
        }

        .dataTables_paginate {
            position: fixed;
            bottom: -20px;
            right: 20px;
            background-color: aquamarine;
        }

        .paginate_button:hover {
            background-color: #ccc;
            color: #000;
        }

        .dataTables_info {
            display: none;
        }

        .overlay {
            background-color: grey;
            opacity: 0.8;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            display: none;
            z-index: 998;
        }

        .thongbao {
            display: none;
            position: absolute;
            width: 30%;
            height: 40%;
            background-color: #fff;
            top: 50%;
            left: 50%;
            transform: translate(-50%,-50%);
            border-radius: 5px;
            z-index: 999;
        }

        .thongbao__title {
            text-align: center;
            padding: 5px;
            font-weight: bold;
            color: #000;
            font-size: 25px;
        }

        .thongbao__des {
            text-align: center;
            padding: 10px;
            color: green
        }

        .thongbao__btn {
            text-align: center;
            margin-top: 30px;
            font-weight: bold;
            display: flex;
            justify-content: center;
        }

        .thongbao__btn--ok {
            background-color: green;
            width: max-content;
            height: max-content;
            border-radius: 5px;
            padding: 5px 20px;
            margin: 0 5px;
            color: #fff;
        }

        .thongbao__btn--huy {
            color: #fff;
            background-color: red;
            width: max-content;
            height: max-content;
            border-radius: 5px;
            padding: 5px 20px;
            margin: 0 5px;
        }

            .thongbao__btn--huy:hover, .thongbao__btn--ok:hover {
                cursor: pointer;
                opacity: 0.8;
                color: #000;
            }

        .btnLoad {
            padding: 10px;
            border-radius: 5px;
            margin: auto 0;
            color: #000;
            margin-left: 30px;
            background-color: #fff;
            font-weight: bold
        }

            .btnLoad:hover {
                color: #fff;
                background-color: #ccc;
            }

        .btnLuachon {
            margin-left: 5px;
        }

        .table .thead-dark th {
            background-color: #fff !important;
        }
    </style>
</head>

<body class="">
    <div class="wrapper ">
        <canvas id="bgCanvas"></canvas>
        <div class="sidebar" data-color="purple" data-background-color="white" data-image="" style="z-index:100">
            <div class="logo">
                <a href="#" class="simple-text logo-normal" style="font-weight:600">
                    <img src="~/images/user.png" style="width:50px" />
                </a>
            </div>
            <div class="sidebar-wrapper">
                <ul class="nav">
                    <li class="nav-item  ">
                        <a class="nav-link" href="/">
                            <p>Trang Chu</p>
                        </a>
                    </li>
                    <li class="nav-item ">
                        <a class="nav-link" href="/Admin/Index">
                            <i class="material-icons">person</i>
                            <p>User Profile</p>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/Admin/ListUser" onclick="getUser()">
                            <i class="material-icons">content_paste</i>
                            <p>User</p>
                        </a>
                    </li>
                    <li class="nav-item ">
                        <a class="nav-link" href="/Admin/LoaiBDS">
                            <i class="material-icons">content_paste</i>
                            <p>Loại Bất Động Sản</p>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/Admin/ListBDS">
                            <i class="material-icons">content_paste</i>
                            <p>Dự Án</p>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/Admin/ListBDSmark">
                            <i class="material-icons">content_paste</i>
                            <p>BDS quan tâm</p>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/Admin/Lichhenyeucau">
                            <i class="material-icons">content_paste</i>
                            <p>Lịch hẹn</p>
                        </a>
                    </li>
                    <li class="nav-item active">
                        <a class="nav-link" href="#">
                            <i class="material-icons">content_paste</i>
                            <p>Thống kê</p>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="main-panel">
            <!-- Navbar -->
            <!-- End Navbar -->
            <div class="content">
                <div style="display:flex;position:absolute;z-index:999;justify-content:space-between; width:90%">
                    <div style="display:flex;">
                        <select name="year" id="year" size="1">
                        </select>

                        <label style="margin:auto 0; color:#fff;margin-left:10px"> Từ :</label>

                        <select name="day" id="daystart" size="1">
                            <option value=" " selected="selected">-- Day --</option>
                        </select>
                        <select name="month" id="month" size="1">
                        </select>

                        <label style="margin:auto 0; color:#fff;margin-left:10px"> Đến :</label>
                        <select name="day" id="dayend" size="1">
                            <option value=" " selected="selected">-- Day --</option>
                        </select>
                        <select name="month" id="monthend" size="1">
                        </select>

                        <label class="btnLoad" onclick="getSelectNam(); return false"> LOAD</label>
                    </div>
                    <div style="display:flex;position:absolute;right:0">
                        <label class="btnLoad btnLuachon btnBieudo" onclick="xembieudo(); return false"> Xem biểu đồ</label>
                        <label class="btnLoad btnLuachon btnAll" onclick="xemAll(); return false"> Xem tất cả</label>
                    </div>
                </div>

                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card card-profile">
                                @*// thống kê*@
                                <div class="thongke table bieudo10" style="height:400px;">
                                    <canvas id="myChart" style="width:100%;height:400px"></canvas>
                                </div>

                                @*//table*@
                                <div class="thongke table tableAll" style="height:400px;">
                                    <table id="example" class="table table-striped table-bordered table-sm infor-table"
                                           data-show-export="true"
                                           data-show-toggle="true"
                                           data-show-columns="true"
                                           data-export-data-type="excel"
                                           data-click-to-select="true"
                                           data-height="450"
                                           data-pagination="true"
                                           data-export-types=['excel']
                                           data-page-list="[10, 25, 50, 100, 200, All]">
                                        <thead class="thead-dark">
                                            <tr>
                                                <th>Tên BDS</th>
                                                <th>Số lần được đặt</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @*thông báo overlay*@
    <div class="overlay">
    </div>
    <div class="thongbao">
        <div class="thongbao__title">
            <h1>Thông báo</h1>
        </div>
        <div class="thongbao__des">
            <h3>Đăng nhập thành công !!!</h3>
        </div>
        <div class="thongbao__btn">
            <div class="thongbao__btn--ok">
                <p class="btn--ok">OK</p>
            </div>
            <div class="thongbao__btn--huy">
                <p class="btn--ok">Đóng</p>
            </div>
        </div>
    </div>
    <!--   Core JS Files   -->
    <script src="~/Content/custom/User/assets/js/core/jquery.min.js"></script>
    <script src="~/Content/custom/User/assets/js/core/popper.min.js"></script>
    <script src="~/Content/custom/User/assets/js/core/bootstrap-material-design.min.js"></script>
    <script src="~/Content/custom/User/assets/js/plugins/perfect-scrollbar.jquery.min.js"></script>

    <script type="text/javascript" src="https://cdn.datatables.net/1.10.2/js/jquery.dataTables.min.js"></script>
    <script>
        $(function () {
            //Năm tự động điền vào select
            var seYear = $('#year');
            var date = new Date();
            var cur = date.getFullYear();

            seYear.append('<option value="">-- Year --</option>');
            for (i = cur; i >= 1900; i--) {
                seYear.append('<option value="' + i + '">' + i + '</option>');
            };

            //Tháng tự động điền vào select
            var seMonth = $('#month');
            var date = new Date();

            var month = new Array();
            month[1] = "January";
            month[2] = "February";
            month[3] = "March";
            month[4] = "April";
            month[5] = "May";
            month[6] = "June";
            month[7] = "July";
            month[8] = "August";
            month[9] = "September";
            month[10] = "October";
            month[11] = "November";
            month[12] = "December";

            seMonth.append('<option value="">-- Month --</option>');
            for (i = 12; i > 0; i--) {
                seMonth.append('<option value="' + i + '">' + month[i] + '</option>');
            };
            //Tháng tự động điền vào select
            var seMonth2 = $('#monthend');
            var date = new Date();
            seMonth2.append('<option value="">-- Month --</option>');
            for (i = 12; i > 0; i--) {
                seMonth2.append('<option value="' + i + '">' + month[i] + '</option>');
            };

            //Ngày tự động điền vào select
            function dayList(month, year) {
                var day = new Date(year, month, 0);
                return day.getDate();
            }

            $('#year, #month, #monthend').change(function () {
                //Đoạn code lấy id không viết bằng jQuery để phù hợp với đoạn code bên dưới
                var y = document.getElementById('year');
                var m = document.getElementById('month');
                var me = document.getElementById('monthend');
                var d = document.getElementById('daystart');
                var de = document.getElementById('dayend');

                var year = y.options[y.selectedIndex].value;

                var month = m.options[m.selectedIndex].value;
                var monthe = me.options[me.selectedIndex].value;

                var day = d.options[d.selectedIndex].value;
                var daye = de.options[de.selectedIndex].value;

                if (day == ' ') {
                    var days = (year == ' ' || month == ' ') ? 31 : dayList(month, year);
                    d.options.length = 0;
                    d.options[d.options.length] = new Option('-- Day --', ' ');
                    for (var i = 1; i <= days; i++)
                        d.options[d.options.length] = new Option(i, i);
                }
                if (daye == ' ') {
                    var days = (year == ' ' || monthe == ' ') ? 31 : dayList(monthe, year);
                    de.options.length = 0;
                    de.options[de.options.length] = new Option('-- Day --', ' ');
                    for (var i = 1; i <= days; i++)
                        de.options[de.options.length] = new Option(i, i);
                }
            });

        });
    </script>

    @* xữ lí*@
    <script type="text/javascript">
  /*  $('#example').DataTable();*/

    $('.tableAll').hide();
        function xembieudo() {
            $('.bieudo10').show();
            $('.tableAll').hide();
        }
        function xemAll() {
            $('.bieudo10').hide();
            $('.tableAll').show();
        }
        ////////////
        function strcmp(a, b) {
            return (a < b ? -1 : (a > b ? 1 : 0));
        }
    var array = JSON.parse('@Newtonsoft.Json.JsonConvert.SerializeObject(listThongke)'.replace(/&quot;/g, "\""));

        function getSelectNam() {
            var arr = [];
            var nam = document.getElementById("year").value;
            var thangstart = document.getElementById("month").value;
            var ngaystart = document.getElementById("daystart").value;

            var thangend = document.getElementById("monthend").value;
            var ngayend = document.getElementById("dayend").value;

            if (nam == "" || thangstart == "" || thangend == "" || ngaystart == "" || ngayend=="") {
                $(".thongbao__des h3").text('Vui lòng chọn ngày tháng năm');
                $(".thongbao__des").css('color', 'green');
                $(".overlay").show();
                $(".thongbao").show();
                $(".thongbao__btn").show();
                $(".thongbao__btn--ok").hide();
                $(".thongbao__btn--huy").click(function () {
                    $(".overlay").hide();
                    $(".thongbao").hide();
                    return;
                })
            }

            if (parseInt(thangstart) > parseInt(thangend)) {
                $(".thongbao__des h3").text('Tháng sau phải lớn hơn tháng trước');
                $(".thongbao__des").css('color', 'green');
                $(".overlay").show();
                $(".thongbao").show();
                $(".thongbao__btn").show();
                $(".thongbao__btn--ok").hide();
                $(".thongbao__btn--huy").click(function () {
                    $(".overlay").hide();
                    $(".thongbao").hide();
                    return;
                })
            }
            if (parseInt(thangstart) == parseInt(thangend)) {
                if (parseInt(ngaystart) > parseInt(ngayend)) {
                    $(".thongbao__des h3").text('Ngày không hợp lệ');
                    $(".thongbao__des").css('color', 'green');
                    $(".overlay").show();
                    $(".thongbao").show();
                    $(".thongbao__btn").show();
                    $(".thongbao__btn--ok").hide();
                    $(".thongbao__btn--huy").click(function () {
                        $(".overlay").hide();
                        $(".thongbao").hide();
                        return;
                    })
                }
            }

            var dstart = new Date();
            dstart.setDate(parseInt(ngaystart));
            dstart.setMonth(parseInt(thangstart-1));
            dstart.setFullYear(parseInt(nam));

            var dend = new Date();
            dend.setDate(parseInt(ngayend));
            dend.setMonth(parseInt(thangend-1));
            dend.setFullYear(parseInt(nam));

            for (let i = 0; i < array.length; i++) {
                var dt = new Date(array[i].Date);
                var dcp = new Date();
                dcp.setDate(dt.getDate());
                dcp.setMonth(dt.getMonth());
                dcp.setFullYear(dt.getFullYear());

                if ((dstart.getTime() <= dcp.getTime()) && (dend.getTime() >= dcp.getTime() )) {
                    arr.push(array[i]);
                }
            }

            console.log(arr);
            var a = [], b = [], prev="";
            for (var i = 0; i < arr.length; i++) {
                if (strcmp(arr[i].NameBDS, prev) != 0) {
                    a.push(arr[i]);
                    b.push(1);
                }
                else {
                    b[b.length - 1]++;
                }
                prev = arr[i].NameBDS;
            }

            for (var i = 0; i < a.length; i++) {
                a[i].Soluong = b[i];
            }

            // 10 giá trị đầu
            const slicedArray = a.slice(0, 10);
            // chart
            changeDataChart(slicedArray);

            // table All
            $("#example").dataTable().fnDestroy();
            if (a.length > 0) {
                $('#example').dataTable({
                    //  data: myData,
                    aoColumns: [
                        { mData: 'NameBDS' },
                        { mData: 'Soluong' },
                    ]
                });

                $('#example').dataTable().fnClearTable();
                $('#example').dataTable().fnAddData(a);
            }
            else {
                $('#example').dataTable().fnClearTable();
            }
        }

        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
    }

        function changeDataChart(arr) {
            var xValues = [];
            var yValues = [];
            var barColors = [];
            arr.map(function (item) {
                xValues.push(item.NameBDS);
                yValues.push(item.Soluong);
                barColors.push(getRandomColor());
            })

            new Chart("myChart", {
                type: "bar",
                data: {
                    labels: xValues,
                    datasets: [{
                        backgroundColor: barColors,
                        data: yValues
                    }]
                },
                options: {
                    scales: {
                        yAxes: [
                            {
                                ticks: {
                                    min: 0, // it is for ignoring negative step.
                                    beginAtZero: true,
                                    stepSize: 1  // if i use this it always set it '1', which look very awkward if it have high value  e.g. '100'.
                                }
                            }
                        ]
                    },
                    legend: { display: false },
                    title: {
                        display: true,
                        text: "Thống kê Bất Động Sản được đặt lịch"
                    }
                }
            });
            console.log()
        }
    </script>

    <script type="text/javascript">
        (function () {
            var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
                window.setTimeout(callback, 1000 / 60);
            };
            window.requestAnimationFrame = requestAnimationFrame;
        })();

        // Terrain stuff.
        var background = document.getElementById("bgCanvas"),
            bgCtx = background.getContext("2d"),
            width = window.innerWidth,
            height = document.body.offsetHeight;

        (height < 400) ? height = 400 : height;

        background.width = width;
        background.height = height;

        function Terrain(options) {
            options = options || {};
            this.terrain = document.createElement("canvas");
            this.terCtx = this.terrain.getContext("2d");
            this.scrollDelay = options.scrollDelay || 90;
            this.lastScroll = new Date().getTime();

            this.terrain.width = width;
            this.terrain.height = height;
            this.fillStyle = options.fillStyle || "#191D4C";
            this.mHeight = options.mHeight || height;

            // generate
            this.points = [];

            var displacement = options.displacement || 140,
                power = Math.pow(2, Math.ceil(Math.log(width) / (Math.log(2))));

            // set the start height and end height for the terrain
            this.points[0] = this.mHeight;//(this.mHeight - (Math.random() * this.mHeight / 2)) - displacement;
            this.points[power] = this.points[0];

            // create the rest of the points
            for (var i = 1; i < power; i *= 2) {
                for (var j = (power / i) / 2; j < power; j += power / i) {
                    this.points[j] = ((this.points[j - (power / i) / 2] + this.points[j + (power / i) / 2]) / 2) + Math.floor(Math.random() * -displacement + displacement);
                }
                displacement *= 0.6;
            }

            document.body.appendChild(this.terrain);
        }

        Terrain.prototype.update = function () {
            // draw the terrain
            this.terCtx.clearRect(0, 0, width, height);
            this.terCtx.fillStyle = this.fillStyle;

            if (new Date().getTime() > this.lastScroll + this.scrollDelay) {
                this.lastScroll = new Date().getTime();
                this.points.push(this.points.shift());
            }

            this.terCtx.beginPath();
            for (var i = 0; i <= width; i++) {
                if (i === 0) {
                    this.terCtx.moveTo(0, this.points[0]);
                } else if (this.points[i] !== undefined) {
                    this.terCtx.lineTo(i, this.points[i]);
                }
            }

            this.terCtx.lineTo(width, this.terrain.height);
            this.terCtx.lineTo(0, this.terrain.height);
            this.terCtx.lineTo(0, this.points[0]);
            this.terCtx.fill();
        }

        // Second canvas used for the stars
        bgCtx.fillStyle = '#05004c';
        bgCtx.fillRect(0, 0, width, height);

        // stars
        function Star(options) {
            this.size = Math.random() * 2;
            this.speed = Math.random() * .05;
            this.x = options.x;
            this.y = options.y;
        }

        Star.prototype.reset = function () {
            this.size = Math.random() * 2;
            this.speed = Math.random() * .05;
            this.x = width;
            this.y = Math.random() * height;
        }

        Star.prototype.update = function () {
            this.x -= this.speed;
            if (this.x < 0) {
                this.reset();
            } else {
                bgCtx.fillRect(this.x, this.y, this.size, this.size);
            }
        }

        function ShootingStar() {
            this.reset();
        }

        ShootingStar.prototype.reset = function () {
            this.x = Math.random() * width;
            this.y = 0;
            this.len = (Math.random() * 80) + 10;
            this.speed = (Math.random() * 10) + 6;
            this.size = (Math.random() * 1) + 0.1;
            // this is used so the shooting stars arent constant
            this.waitTime = new Date().getTime() + (Math.random() * 3000) + 500;
            this.active = false;
        }

        ShootingStar.prototype.update = function () {
            if (this.active) {
                this.x -= this.speed;
                this.y += this.speed;
                if (this.x < 0 || this.y >= height) {
                    this.reset();
                } else {
                    bgCtx.lineWidth = this.size;
                    bgCtx.beginPath();
                    bgCtx.moveTo(this.x, this.y);
                    bgCtx.lineTo(this.x + this.len, this.y - this.len);
                    bgCtx.stroke();
                }
            } else {
                if (this.waitTime < new Date().getTime()) {
                    this.active = true;
                }
            }
        }

        var entities = [];

        // init the stars
        for (var i = 0; i < height; i++) {
            entities.push(new Star({
                x: Math.random() * width,
                y: Math.random() * height
            }));
        }

        // Add 2 shooting stars that just cycle.
        entities.push(new ShootingStar());
        entities.push(new ShootingStar());
        entities.push(new ShootingStar());
        entities.push(new ShootingStar());
        entities.push(new ShootingStar());
        entities.push(new ShootingStar());
        entities.push(new ShootingStar());
        entities.push(new Terrain({ mHeight: (height) - 320 }));
        entities.push(new Terrain({ displacement: 120, scrollDelay: 50, fillStyle: "rgb(17,20,40)", mHeight: (height) - 200 }));
        entities.push(new Terrain({ displacement: 100, scrollDelay: 20, fillStyle: "rgb(10,10,5)", mHeight: height - 120 }));

        //animate background
        function animate() {
            bgCtx.fillStyle = '#110E19';
            bgCtx.fillRect(0, 0, width, height);
            bgCtx.fillStyle = '#ffffff';
            bgCtx.strokeStyle = '#ffffff';

            var entLen = entities.length;

            while (entLen--) {
                entities[entLen].update();
            }
            requestAnimationFrame(animate);
        }
        animate();
    </script>
    <script>
        $(document).ready(function () {
            $().ready(function () {
                $sidebar = $('.sidebar');

                $sidebar_img_container = $sidebar.find('.sidebar-background');

                $full_page = $('.full-page');

                $sidebar_responsive = $('body > .navbar-collapse');

                window_width = $(window).width();

                fixed_plugin_open = $('.sidebar .sidebar-wrapper .nav li.active a p').html();

                if (window_width > 767 && fixed_plugin_open == 'Dashboard') {
                    if ($('.fixed-plugin .dropdown').hasClass('show-dropdown')) {
                        $('.fixed-plugin .dropdown').addClass('open');
                    }

                }

                $('.fixed-plugin a').click(function (event) {
                    // Alex if we click on switch, stop propagation of the event, so the dropdown will not be hide, otherwise we set the  section active
                    if ($(this).hasClass('switch-trigger')) {
                        if (event.stopPropagation) {
                            event.stopPropagation();
                        } else if (window.event) {
                            window.event.cancelBubble = true;
                        }
                    }
                });

                $('.fixed-plugin .active-color span').click(function () {
                    $full_page_background = $('.full-page-background');

                    $(this).siblings().removeClass('active');
                    $(this).addClass('active');

                    var new_color = $(this).data('color');

                    if ($sidebar.length != 0) {
                        $sidebar.attr('data-color', new_color);
                    }

                    if ($full_page.length != 0) {
                        $full_page.attr('filter-color', new_color);
                    }

                    if ($sidebar_responsive.length != 0) {
                        $sidebar_responsive.attr('data-color', new_color);
                    }
                });

                $('.fixed-plugin .background-color .badge').click(function () {
                    $(this).siblings().removeClass('active');
                    $(this).addClass('active');

                    var new_color = $(this).data('background-color');

                    if ($sidebar.length != 0) {
                        $sidebar.attr('data-background-color', new_color);
                    }
                });

                $('.fixed-plugin .img-holder').click(function () {
                    $full_page_background = $('.full-page-background');

                    $(this).parent('li').siblings().removeClass('active');
                    $(this).parent('li').addClass('active');

                    var new_image = $(this).find("img").attr('src');

                    if ($sidebar_img_container.length != 0 && $('.switch-sidebar-image input:checked').length != 0) {
                        $sidebar_img_container.fadeOut('fast', function () {
                            $sidebar_img_container.css('background-image', 'url("' + new_image + '")');
                            $sidebar_img_container.fadeIn('fast');
                        });
                    }

                    if ($full_page_background.length != 0 && $('.switch-sidebar-image input:checked').length != 0) {
                        var new_image_full_page = $('.fixed-plugin li.active .img-holder').find('img').data('src');

                        $full_page_background.fadeOut('fast', function () {
                            $full_page_background.css('background-image', 'url("' + new_image_full_page + '")');
                            $full_page_background.fadeIn('fast');
                        });
                    }

                    if ($('.switch-sidebar-image input:checked').length == 0) {
                        var new_image = $('.fixed-plugin li.active .img-holder').find("img").attr('src');
                        var new_image_full_page = $('.fixed-plugin li.active .img-holder').find('img').data('src');

                        $sidebar_img_container.css('background-image', 'url("' + new_image + '")');
                        $full_page_background.css('background-image', 'url("' + new_image_full_page + '")');
                    }

                    if ($sidebar_responsive.length != 0) {
                        $sidebar_responsive.css('background-image', 'url("' + new_image + '")');
                    }
                });

                $('.switch-sidebar-image input').change(function () {
                    $full_page_background = $('.full-page-background');

                    $input = $(this);

                    if ($input.is(':checked')) {
                        if ($sidebar_img_container.length != 0) {
                            $sidebar_img_container.fadeIn('fast');
                            $sidebar.attr('data-image', '#');
                        }

                        if ($full_page_background.length != 0) {
                            $full_page_background.fadeIn('fast');
                            $full_page.attr('data-image', '#');
                        }

                        background_image = true;
                    } else {
                        if ($sidebar_img_container.length != 0) {
                            $sidebar.removeAttr('data-image');
                            $sidebar_img_container.fadeOut('fast');
                        }

                        if ($full_page_background.length != 0) {
                            $full_page.removeAttr('data-image', '#');
                            $full_page_background.fadeOut('fast');
                        }

                        background_image = false;
                    }
                });

                $('.switch-sidebar-mini input').change(function () {
                    $body = $('body');

                    $input = $(this);

                    if (md.misc.sidebar_mini_active == true) {
                        $('body').removeClass('sidebar-mini');
                        md.misc.sidebar_mini_active = false;

                        $('.sidebar .sidebar-wrapper, .main-panel').perfectScrollbar();

                    } else {

                        $('.sidebar .sidebar-wrapper, .main-panel').perfectScrollbar('destroy');

                        setTimeout(function () {
                            $('body').addClass('sidebar-mini');

                            md.misc.sidebar_mini_active = true;
                        }, 300);
                    }

                    // we simulate the window Resize so the charts will get updated in realtime.
                    var simulateWindowResize = setInterval(function () {
                        window.dispatchEvent(new Event('resize'));
                    }, 180);

                    // we stop the simulation of Window Resize after the animations are completed
                    setTimeout(function () {
                        clearInterval(simulateWindowResize);
                    }, 1000);

                });
            });
        });</script>
</body>
</html>